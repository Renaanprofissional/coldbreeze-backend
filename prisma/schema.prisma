// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  password          String
  image             String?
  emailVerified     Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  carts             Cart[]
  shippingAddresses ShippingAddress[]
  orders            Order[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  createdAt   DateTime         @default(now())
}

model ProductVariant {
  id            String         @id @default(uuid())
  productId     String
  product       Product        @relation(fields: [productId], references: [id])
  name          String
  slug          String         @unique
  color         String
  priceInCents  Int
  imageUrl      String
  createdAt     DateTime       @default(now())
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id               String         @id @default(uuid())
  cartId           String
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int            @default(1)
  createdAt        DateTime       @default(now())
}

model ShippingAddress {
  id           String    @id @default(uuid())
  userId       String
  orders       Order[]
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipient    String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  phone        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

model Order {
  id                     String          @id @default(uuid())
  userId                 String
  user                   User            @relation(fields: [userId], references: [id])
  shippingId             String
  shippingAddress        ShippingAddress @relation(fields: [shippingId], references: [id])
  totalPrice             Int
  shippingPrice          Int?
  couponId               String?
  coupon                 Coupon?         @relation(fields: [couponId], references: [id])
  discountAppliedInCents Int             @default(0)
  status                 OrderStatus     @default(PENDING)
  items                  OrderItem[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  order            Order           @relation(fields: [orderId], references: [id])
  productVariantId String
  productVariant   ProductVariant  @relation(fields: [productVariantId], references: [id])
  quantity         Int
  priceInCents     Int
}

enum DiscountType {
  PERCENT
  FIXED   
}

model Coupon {
  id             String        @id @default(uuid())
  code           String        @unique
  description    String?
  discountType   DiscountType  @default(PERCENT)
  discountValue  Int          
  active         Boolean       @default(true)
  startsAt       DateTime?
  endsAt         DateTime?
  maxRedemptions Int?
  redemptions    Int           @default(0)
  orders         Order[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
